---
description: 
globs: 
alwaysApply: true
---
# Project Dembegna: AI Assistant Guidelines (.cursorrules.md)

This document provides context and guidelines for AI assistants working on the "Dembegna" project. Please refer to this information to ensure your responses and code suggestions are relevant and aligned with the project's goals, stack, and conventions.

## 1. Project Overview

### 1.1. Project Name
Dembegna (Amharic for "Customer")

### 1.2. Core Purpose
To create a simple, digital customer loyalty program for a wine shop. The initial focus is on a stamp-card-like system where customers can register, receive a digital pass, and clerks can manage stamps and rewards.

### 1.3. Target Users
* **Customers:** Patrons of the wine shop who sign up for the loyalty program.
* **Admin Users (Clerks):** Wine shop employees who will manage customer stamps and rewards.

## 2. V1 Scope & Key Features

### 2.1. Customer Flow (V1)
1.  **Sign-up:** Customers register via a web form (Name, Phone Number, optional Email, SMS Consent).
2.  **Data Storage:** Customer information is saved to a PostgreSQL database.
3.  **Digital Pass:** (Future V1 step) Customers receive a digital wallet pass (Apple Wallet / Google Wallet) linked to their account. This pass will contain a unique identifier (e.g., QR code).

### 2.2. Admin Flow (V1)
1.  **Secure Login:** Designated admin users (clerks) log in to an Admin PWA.
2.  **Customer Lookup:** (Future V1 step) Admins can look up customers (e.g., by scanning the QR code on their digital pass).
3.  **Stamp Management:** (Future V1 step) Admins can add stamps to a customer's account.
4.  **Reward Redemption:** (Future V1 step) Admins can redeem rewards for customers based on accumulated stamps.

### 2.3. Out of Scope for V1 (Examples to Confirm/Refine)
* Complex tier-based loyalty levels.
* Automated marketing emails/SMS beyond basic transactional notifications (e.g., pass delivery, event invites).
* Advanced analytics dashboard.
* Dynamic stamp count updates *directly visible on the initial digital wallet pass* (pass will primarily be an identifier for V1).

## 3. Tech Stack & Architecture

### 3.1. Overall Structure
* **Monorepo:** Managed with **`pnpm workspaces`**.
    * Root directory: `dembegna/`
    * Applications in `dembegna/apps/`
    * Shared packages in `dembegna/packages/`

### 3.2. `packages/shared-types`
* **Purpose:** Centralized TypeScript interfaces and types (e.g., `DembegnaUser`, `AdminUser`, API payloads) shared across the monorepo.
* **Technology:** TypeScript.

### 3.3. `apps/api` (Backend)
* **Name:** `@dembegna/api`
* **Runtime:** Node.js
* **Framework:** Express.js
* **Language:** TypeScript
* **Database Interaction:** `pg` library for PostgreSQL.
* **Authentication:**
    * Admin Login: Username/password with JWTs (JSON Web Tokens). Passwords hashed using `bcryptjs`.
* **API Versioning:** Path-based, starting with `/api/v1/...`

### 3.4. `apps/customer-frontend` (Customer Sign-up Portal)
* **Name:** `@dembegna/customer-frontend`
* **Framework:** Next.js (App Router)
* **Language:** TypeScript
* **Styling:** Tailwind CSS
* **UI Components:** `shadcn/ui` (initialized per app)
* **Forms:** `react-hook-form` with `zod` for validation (as facilitated by `shadcn/ui` form components).

### 3.5. `apps/admin-pwa` (Admin Panel)
* **Name:** `@dembegna/admin-pwa`
* **Framework:** Next.js (App Router)
* **Language:** TypeScript
* **Styling:** Tailwind CSS
* **UI Components:** `shadcn/ui` (initialized per app)
* **PWA Functionality:** Implemented using **`@serwist/next`**. Includes a web app manifest and service worker.
* **Purpose:** Interface for clerks to log in and manage the loyalty program.

### 3.6. Database
* **Type:** PostgreSQL
* **Access:** From the `apps/api` backend via the `pg` library.

### 3.7. Version Control
* **System:** Git

## 4. Key Architectural Decisions & Conventions
* **TypeScript First:** All packages and applications are to be written in TypeScript where possible.
* **Monorepo with `pnpm`:** Centralized management of a multi-package project.
* **`shadcn/ui` for UI:** Components are added per-app (not from a shared UI package within the monorepo initially).
* **API Versioning:** Use `/api/v1/...` for the first version of API endpoints.
* **Environment Variables:** Use `.env` files (ignored by Git) for sensitive data like `DATABASE_URL`, `JWT_SECRET`. Include `.env.example` files.
* **Error Handling:** Aim for consistent error response formats from the API.
* **Admin Authentication:** JWT-based for stateless authentication of admin users.

## 5. Coding Style & Preferences
* **Clarity and Readability:** Prioritize clear and maintainable code.
* **Modularity:** Break down features into smaller, manageable modules/components/services.
* **TypeScript:** Leverage TypeScript's features for type safety (e.g., use defined types from `@dembegna/shared-types`).
* **ESLint & Prettier:** (Assumed to be set up or will be) Use for code linting and formatting to maintain consistency.
* **Asynchronous Operations:** Use `async/await` for promises.
* **Functional Components:** (For React/Next.js) Prefer functional components with Hooks.

## 6. How to Help Me (AI Assistant Guidelines)
* **Understand the Stack:** Please refer to the tech stack defined in section 3.
* **Code Snippets:** Provide code snippets in TypeScript. When suggesting frontend components, assume use of Next.js (App Router), Tailwind CSS, and `shadcn/ui`. For backend, assume Node.js/Express.js/TypeScript with PostgreSQL.
* **File Paths:** When suggesting file creation or modification, use paths relative to the monorepo structure (e.g., `apps/api/src/modules/...` or `packages/shared-types/src/...`).
* **`pnpm` Commands:** When suggesting package management commands, use `pnpm` syntax (e.g., `pnpm add <package>`, `pnpm --filter <app_name> add <package>`).
* **Problem Solving:** When I provide an error, please help analyze it in the context of this project setup.
* **Focus on V1:** Keep suggestions aligned with the V1 scope unless specified otherwise.
* **Explain Concepts:** Briefly explain new concepts or libraries if they are introduced.
* **Iterative Approach:** Help me build features step-by-step.

## 7. Current Focus / Next Steps (User to update this section regularly)
* **Last Completed:** Successfully implemented the admin login API endpoint (`/api/v1/admin/auth/login`) with JWT generation.
* **Current Goal:** [User to fill in, e.g., "Build the Admin PWA login page and connect it to the API."]
* **Upcoming:**
    * Digital Wallet Pass generation for customers.
    * Admin PWA features (customer lookup, stamp adding, reward redemption).

---